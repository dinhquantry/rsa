using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics.Eventing.Reader;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
using Word = Microsoft.Office.Interop.Word;

namespace Rsa8
{
    public partial class Form1 : Form
    {
        private RSA rsa = new RSA();
        public Form1()
        {
            InitializeComponent();
        }
        // Đọc file
        // Đọc nội dung tệp
        private string ReadFile(string filePath)
        {
            if (Path.GetExtension(filePath).ToLower() == ".txt")
            {
                return File.ReadAllText(filePath);
            }
            else if (Path.GetExtension(filePath).ToLower() == ".doc" || Path.GetExtension(filePath).ToLower() == ".docx")
            {
                return docFile(filePath);
            }
            return string.Empty;
        }
        private string docFile(string filePath)
        {
            Word.Application wordApp = new Word.Application();
            Word.Document wordDoc = null;
            string tempRtfFilePath = Path.GetTempFileName();

            try
            {
                wordDoc = wordApp.Documents.Open(filePath);
                wordDoc.SaveAs2(tempRtfFilePath, Word.WdSaveFormat.wdFormatRTF);
                wordDoc.Close();
                System.Runtime.InteropServices.Marshal.ReleaseComObject(wordDoc);
                wordApp.Quit();
                System.Runtime.InteropServices.Marshal.ReleaseComObject(wordApp);

                return File.ReadAllText(tempRtfFilePath);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi khi đọc tệp: " + ex.Message);
                return string.Empty;
            }
            finally
            {
                if (File.Exists(tempRtfFilePath))
                {
                    File.Delete(tempRtfFilePath);
                }
            }
        }
        //Lấy file txt/docx
        private void btnFile_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFile = new OpenFileDialog();
            openFile.Filter = "All file|*.*";
            if (openFile.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFile.FileName;
                string fileContent = string.Empty;
                if (Path.GetExtension(filePath).ToLower() == ".txt")
                {
                    fileContent = File.ReadAllText(filePath);

                    txt1.Text = fileContent;
                }
                else if (Path.GetExtension(filePath).ToLower() == ".doc" || Path.GetExtension(filePath).ToLower() == ".docx")
                {
                    fileContent = docFile(filePath);
                    txt1.Rtf = fileContent;
                }
            }
        }
        // Nút reset
        private void button3_Click(object sender, EventArgs e)
        {
            Close();
        }
        // Nút thoát
        private void button2_Click(object sender, EventArgs e)
        {
            if (txt1.Text == txt2.Text && txt3.Text == txt4.Text && txt5.Text == txt6.Text && txt7.Text == "" && txt1.Text == "" && txt3.Text == "" && txt5.Text == "")
            {
                MessageBox.Show("Reset cái gì nữa ?");
            }
            txt1.Text = txt2.Text = txt3.Text = txt4.Text = txt5.Text = txt6.Text = txt7.Text = "";
        }
        // Tạo thuật toán băm MD5 cho văn bản
        private string ComputeMd5Hash(string input)
        {
            // Các hằng số là phần nguyên của sin của các số nguyên (theo radian) * 2^32.
            uint[] K = {
                0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
                0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
                0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
                0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
                0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
                0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
                0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
                0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
                0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
                0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
                0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
                0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
                0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
                0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
                0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
                0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
            };
            // R chỉ định các giá trị dịch chuyển theo vòng
            int[] R = {
                7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
                5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20,
                4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21
            };
            // Khởi tạo các biến
            uint a0 = 0x67452301;   // A
            uint b0 = 0xefcdab89;   // B
            uint c0 = 0x98badcfe;   // C
            uint d0 = 0x10325476;   // D
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            // Lưu ý: Tất cả các biến đều là 32-bit không dấu và gói theo modulo 2^32 khi tính toán
            // r chỉ định các giá trị dịch chuyển theo vòng
            // K chỉ định các hằng số theo vòng
            // Tiền xử lý: thêm một bit 1
            var bitLength = inputBytes.Length * 8; // Lưu ý, chúng ta thêm độ dài trước khi padding.
            var lengthBytes = BitConverter.GetBytes((ulong)bitLength);
            inputBytes = inputBytes.Concat(new byte[] { 0x80 }).ToArray();
            // Tiền xử lý: thêm các byte 0 cho đến khi độ dài còn thiếu 64 bit trước 512.
            while ((inputBytes.Length * 8) % 512 != 448)
            {
                inputBytes = inputBytes.Concat(new byte[] { 0x00 }).ToArray();
            }
            // Thêm độ dài ban đầu dưới dạng bit mod 2^64 vào thông điệp
            inputBytes = inputBytes.Concat(lengthBytes).ToArray();
            // Xử lý thông điệp theo từng khối 512-bit liên tiếp
            for (int i = 0; i < inputBytes.Length / 64; i++)
            {
                var chunk = new uint[16];
                for (int j = 0; j < 16; j++)
                {
                    chunk[j] = BitConverter.ToUInt32(inputBytes, (i * 64) + (j * 4));
                }
                // Khởi tạo giá trị băm cho khối này
                uint A = a0;
                uint B = b0;
                uint C = c0;
                uint D = d0;
                // Vòng lặp chính
                for (int j = 0; j < 64; j++)
                {
                    uint F, g;
                    if (j < 16)
                    {
                        F = (B & C) | (~B & D);
                        g = (uint)j;
                    }
                    else if (j < 32)
                    {
                        F = (D & B) | (~D & C);
                        g = (uint)((5 * j + 1) % 16);
                    }
                    else if (j < 48)
                    {
                        F = B ^ C ^ D;
                        g = (uint)((3 * j + 5) % 16);
                    }
                    else
                    {
                        F = C ^ (B | ~D);
                        g = (uint)((7 * j) % 16);
                    }

                    uint temp = D;
                    D = C;
                    C = B;
                    B = B + LeftRotate((A + F + K[j] + chunk[g]), R[j]);
                    A = temp;
                }
                // Thêm băm của khối này vào kết quả hiện tại:
                a0 += A;
                b0 += B;
                c0 += C;
                d0 += D;
            }
            // Tạo giá trị băm cuối cùng (big-endian) dưới dạng số 128-bit:
            var result = BitConverter.GetBytes(a0)
                .Concat(BitConverter.GetBytes(b0))
                .Concat(BitConverter.GetBytes(c0))
                .Concat(BitConverter.GetBytes(d0))
                .ToArray();
            return BitConverter.ToString(result).Replace("-", "").ToLower();
        }
        private uint LeftRotate(uint x, int c)
        {
            return (x << c) | (x >> (32 - c));
        }
        //thực hiện băm txt1 và hiển thị lên txt2 (Tạo chữ ký)
        private void button1_Click(object sender, EventArgs e)
        {
            if (txt1.Text == "")
            {
                MessageBox.Show("Hãy ghi nội dung cần băm");
            }
            else
            {
                string textToHash = txt1.Text;
                string hashResult = ComputeMd5Hash(textToHash);
                txt2.Text = hashResult;

            }
        }

        //thực hiện băm txt4 và hiển thị lên txt6 (Kiểm tra chữ ký)
        private void btnBam2_Click(object sender, EventArgs e)
        {
            if (txt4.Text == "")
            {
                MessageBox.Show("Hãy ghi nội dung cần băm");
            }
            else
            {
                string textToHash = txt4.Text;
                string hashResult = ComputeMd5Hash(textToHash);
                txt6.Text = hashResult;
            }
        }

        private void btnLuu_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txt3.Text))
            {
                SaveContent(txt3.Text, "Tệp văn bản (*.txt)|*.txt|Tệp Word (*.docx)|*.docx");
            }
            else
            {
                MessageBox.Show("Không có gì để lưu!");
            }
        }

        public class RSA
        {
            private int p, q, n, e, d;

            public RSA()
            {
                TaoKhoaMoi();
            }

            private bool KiemTraNguyenTo(int i)
            {
                if (i < 2) return false;
                for (int j = 2; j * j <= i; j++)
                    if (i % j == 0) return false;
                return true;
            }

            public void TaoKhoaMoi()
            {
                Random rd = new Random();
                do
                {
                    p = rd.Next(11, 5000);
                } while (!KiemTraNguyenTo(p));

                do
                {
                    q = rd.Next(11, 5000);
                } while (!KiemTraNguyenTo(q) || q == p);


                // Tính n = p*q
                n = p * q;

                // Tính số nguyên tố cùng nhau e
                do
                {
                    e = rd.Next(2, 100);
                } while (!KiemTraNguyenTo(e) || !NguyenToCungNhau(e, (p - 1) * (q - 1)));

                // Tính d sao cho (d*e) % ((p-1)*(q-1)) = 1
                int k = 1;
                while (true)
                {
                    if ((k * (p - 1) * (q - 1) + 1) % e == 0)
                    {
                        d = (k * (p - 1) * (q - 1) + 1) / e;
                        break;
                    }
                    k++;
                }
            }

            private bool NguyenToCungNhau(int a, int b)
            {
                int GCD(int x, int y)
                {
                    while (y != 0)
                    {
                        int temp = y;
                        y = x % y;
                        x = temp;
                    }
                    return x;
                }
                return GCD(a, b) == 1;
            }

            private int Mod(int m, int e, int n)
            {
                long result = 1;
                long baseVal = m % n;

                while (e > 0)
                {
                    if ((e % 2) == 1)
                    {
                        result = (result * baseVal) % n;
                    }
                    e >>= 1;
                    baseVal = (baseVal * baseVal) % n;
                }

                return (int)result;
            }

            private string Chuoi(int[] a)
            {
                string s = "";
                for (int i = 0; i < a.Length - 1; i++)
                {
                    s = s + a[i].ToString() + "-";
                }
                s = s + a[a.Length - 1].ToString();
                return s;
            }

            public string MaHoa(string s)
            {
                byte[] bytes = Encoding.UTF8.GetBytes(s);
                List<int> encryptedValues = new List<int>();

                foreach (byte b in bytes)
                {
                    encryptedValues.Add(Mod(b, e, n));
                }

                return string.Join("-", encryptedValues);
            }

            public string GiaiMa(string s)
            {
                string[] encryptedValues = s.Split('-');
                List<byte> decryptedBytes = new List<byte>();

                foreach (string value in encryptedValues)
                {
                    int encryptedValue = int.Parse(value);
                    decryptedBytes.Add((byte)Mod(encryptedValue, d, n));
                }

                return Encoding.UTF8.GetString(decryptedBytes.ToArray());
            }

            private int LeftRotate(int x, int c)
            {
                return (x << c) | (x >> (32 - c));
            }
        }

        private void btlKy_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txt1.Text))
            {
                string s = txt1.Text;
                string maHoa = rsa.MaHoa(s);
                txt3.Text = maHoa;
            }
            else
            {
                MessageBox.Show("Nên có cái gì đó để ký!");
            }

        }

        private void btnDich_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txt5.Text))
            {
                string s = txt5.Text;
                string giaiMa = rsa.GiaiMa(s);
                txt4.Text = giaiMa;

                // Chuyển đổi văn bản giải mã thành định dạng gốc (ví dụ: RTF)
                string originalFormatText = ConvertToOriginalFormat(giaiMa);
                txt4.Text = originalFormatText;
            }
            else
            {
                MessageBox.Show("Hãy đưa chữ ký qua đây để dịch!");
            }
        }
        // Hàm chuyển đổi văn bản giải mã thành định dạng gốc
        private string ConvertToOriginalFormat(string decryptedText)
        {
            // Kiểm tra xem decryptedText có phải là văn bản RTF không
            if (IsRtf(decryptedText))
            {
                // Nếu là RTF, sử dụng RichTextBox để chuyển đổi
                RichTextBox richTextBox = new RichTextBox();
                richTextBox.Rtf = decryptedText;
                return richTextBox.Text;
            }
            else
            {
                // Trường hợp không phải là RTF, trả về văn bản nguyên thủy
                return decryptedText;
            }
        }

        // Hàm kiểm tra xem văn bản có phải là định dạng RTF không
        private bool IsRtf(string text)
        {
            // Kiểm tra xem văn bản có bắt đầu và kết thúc bằng "{\rtf" không
            return text.StartsWith("{\\rtf") && text.EndsWith("}");
        }

        private void btnChuyen_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txt3.Text))
            {
                txt5.Text = txt3.Text;
            }
            else
            {
                MessageBox.Show("Chẳng có gì để chuyển cả :)");
            }

        }

        private void btnKiemtra_Click(object sender, EventArgs e)
        {
            bool isSignatureMatch = txt2.Text == txt6.Text;
            bool isTextMatch = txt1.Text == txt4.Text;

            if (string.IsNullOrEmpty(txt2.Text) || string.IsNullOrEmpty(txt6.Text))
            {
                MessageBox.Show("Có vẻ bạn chưa thực hiện xong các bước (@-@)");
                return;
            }

            string message = isSignatureMatch ? "Chữ ký đúng!" : "Chữ ký sai!";
            string textStatus = isTextMatch ? "Văn bản không thay đổi" : "Văn bản đã thay đổi";

            txt7.Text = message + "\n" + textStatus;
        }

        private void txt1_TextChanged(object sender, EventArgs e) { }

        private void txt4_TextChanged(object sender, EventArgs e) { }

        private void btnTaokhoa_Click(object sender, EventArgs e)
        {
            rsa.TaoKhoaMoi();
            MessageBox.Show("Khóa mới đã được khai sinh!");
        }

        private void btnFilevanban_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txt4.Text))
            {
                SaveContent(txt4.Text, "Tệp văn bản (*.txt)|*.txt|Tệp Word (*.docx)|*.docx|Tất cả tệp|*.*");
            }
            else
            {
                MessageBox.Show("Không có gì để lưu!");
            }
        }

        private void btnFilechuky_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txt5.Text))
            {
                SaveContent(txt5.Text, "Tệp văn bản (*.txt)|*.txt|Tệp Word (*.docx)|*.docx|Tất cả tệp|*.*");
            }
            else
            {
                MessageBox.Show("Không có gì để lưu!");
            }
        }

        private void SaveContentAsDocx(string content, string filePath)
        {
            Word.Application wordApp = new Word.Application();
            Word.Document wordDoc = wordApp.Documents.Add();

            try
            {
                // Thêm nội dung vào tài liệu Word
                Word.Paragraph para = wordDoc.Content.Paragraphs.Add();
                para.Range.Text = content;
                para.Range.InsertParagraphAfter();

                // Lưu tài liệu
                wordDoc.SaveAs2(filePath, Word.WdSaveFormat.wdFormatXMLDocument);
                wordDoc.Close();
                MessageBox.Show("Lưu tệp .docx thành công!");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi khi lưu tệp: " + ex.Message);
            }
            finally
            {
                // Đảm bảo rằng đối tượng Word Application được giải phóng
                wordApp.Quit();
                System.Runtime.InteropServices.Marshal.ReleaseComObject(wordApp);
            }
        }
        private void SaveContent(string content, string filter)
        {
            saveFileDialog1.Filter = filter;
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string filePath = saveFileDialog1.FileName;
                string extension = Path.GetExtension(filePath).ToLower();

                if (extension == ".docx")
                {
                    SaveContentAsDocx(content, filePath);
                }
                else
                {
                    File.WriteAllText(filePath, content);
                    MessageBox.Show("Lưu nội dung thành công!");
                }
            }
            else
            {
                MessageBox.Show("Hủy thao tác lưu.");
            }
        }

        private void txt7_TextChanged(object sender, EventArgs e)
        {

        }

        private void txt2_TextChanged(object sender, EventArgs e)
        {

        }

        private void txt5_TextChanged(object sender, EventArgs e)
        {

        }

        private void txt3_TextChanged(object sender, EventArgs e)
        {

        }

        private void txt6_TextChanged(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void label11_Click(object sender, EventArgs e)
        {

        }

        private void label12_Click(object sender, EventArgs e)
        {

        }

        private void label13_Click(object sender, EventArgs e)
        {

        }

        private void label14_Click(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {

        }

        private void saveFileDialog1_FileOk(object sender, CancelEventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click_1(object sender, EventArgs e)
        {

        }
    }
}
